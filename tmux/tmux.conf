# True colors
set -g default-terminal 'screen-256color'
set -ga terminal-overrides ',*256col*:Tc'

# Prefix
unbind C-b
set -g prefix C-a
bind C-a send-prefix

# Settings
set -g escape-time 0
set -g repeat-time 500
set -g focus-events on
set -g base-index 1
set -g pane-base-index 1
setw -g automatic-rename on
set -g renumber-windows on
set -g extended-keys always

# Vi mode
setw -g mode-keys vi
bind C-C copy-mode
bind -T copy-mode-vi C-C send -X cancel
bind -T copy-mode-vi Escape send -X cancel
bind -T copy-mode-vi i send -X cancel
bind -T copy-mode-vi v send -X begin-selection
bind -T copy-mode-vi C-B send -X rectangle-toggle
bind -T copy-mode-vi y send -X copy-pipe-and-cancel 'xclip -i -selection clipboard'
bind -T copy-mode-vi C-S-C send -X copy-pipe-and-cancel 'xclip -i -selection clipboard'

# Search
bind -T copy-mode-vi / copy-mode \; command-prompt -i -p "(search up)" "send -X search-backward-incremental \"%%%\""
bind -T copy-mode-vi C-/ copy-mode \; command-prompt -i -p "(search up)" "send -X search-backward-incremental \"%%%\""
bind / copy-mode \; command-prompt -i -p "(search up)" "send -X search-backward-incremental \"%%%\""
bind C-/ copy-mode \; command-prompt -i -p "(search up)" "send -X search-backward-incremental \"%%%\""
# lifehack :p
bind -T copy-mode-vi N send -X search-again
bind -T copy-mode-vi n send -X search-reverse

# Mouse support
set -g mouse on
bind -T copy-mode-vi WheelUpPane send -N3 -X scroll-up
bind -T copy-mode-vi WheelDownPane send -N3 -X scroll-down

# Unbind awkward things
unbind p
unbind c
unbind z
# unbind -T copy-mode-vi MouseDragEnd1Pane

# Reload config
bind R source-file ~/.config/tmux/tmux.conf \; display "tmux.conf Reloaded!"

# Pane actions
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
bind p last-pane
bind -r H resize-pane -L 2
bind -r J resize-pane -D 2
bind -r K resize-pane -U 2
bind -r L resize-pane -R 2
bind | command-prompt "resize-pane -x '%%'"
bind _ command-prompt "resize-pane -y '%%'"
bind s split-window -v -c "#{pane_current_path}"
bind v split-window -h -c "#{pane_current_path}"
bind C-S split-window -v -c "#{pane_current_path}"
bind C-V split-window -h -c "#{pane_current_path}"

# Window actions
bind -r , previous-window
bind -r C-, previous-window
bind -r . next-window
bind -r C-. next-window
bind p last-window
bind -r < swap-window -d -t -
bind -r > swap-window -d -t +
#bind t new-window -ac "#{pane_current_path}"
bind t new-window -c "#{pane_current_path}"
bind C-T new-window -c "#{pane_current_path}"
bind T break-pane -a
bind M join-pane -h -t :-
bind n command-prompt "rename-window '%%'"
bind C-N command-prompt "rename-window '%%'"
bind q kill-pane
bind C-Q kill-pane
bind Q kill-window

# Fast actions
# bind -n C-S-Tab previous-window
# bind -n C-Tab next-window
bind -n C-, previous-window
bind -n C-. next-window
bind -n C-Tab last-window
bind -n C-0 select-window -t :0
bind -n C-1 select-window -t :1
bind -n C-2 select-window -t :2
bind -n C-3 select-window -t :3
bind -n C-4 select-window -t :4
bind -n C-5 select-window -t :5
bind -n C-6 select-window -t :6
bind -n C-7 select-window -t :7
bind -n C-8 select-window -t :8
bind -n C-9 select-window -t :9
bind -n C-\; last-pane
# bind -n C-T new-window -c "#{pane_current_path}"
# bind -n C-S-H resize-pane -L 2
# bind -n C-S-J resize-pane -D 2
# bind -n C-S-K resize-pane -U 2
# bind -n C-S-L resize-pane -R 2

# Neovim integration
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind -n 'C-H' if-shell "$is_vim" 'send-keys C-H' 'select-pane -L'
bind -n 'C-J' if-shell "$is_vim" 'send-keys C-J' 'select-pane -D'
bind -n 'C-K' if-shell "$is_vim" 'send-keys C-K' 'select-pane -U'
bind -n 'C-L' if-shell "$is_vim" 'send-keys C-L' 'select-pane -R'
bind -T copy-mode-vi 'C-H' select-pane -L
bind -T copy-mode-vi 'C-J' select-pane -D
bind -T copy-mode-vi 'C-K' select-pane -U
bind -T copy-mode-vi 'C-L' select-pane -R
bind -n 'C-S-H' if-shell "$is_vim" 'send-keys C-S-H' 'resize-pane -L 2'
bind -n 'C-S-J' if-shell "$is_vim" 'send-keys C-S-J' 'resize-pane -D 2'
bind -n 'C-S-K' if-shell "$is_vim" 'send-keys C-S-K' 'resize-pane -U 2'
bind -n 'C-S-L' if-shell "$is_vim" 'send-keys C-S-L' 'resize-pane -R 2'
bind -T copy-mode-vi C-S-H resize-pane -L 2
bind -T copy-mode-vi C-S-J resize-pane -D 2
bind -T copy-mode-vi C-S-K resize-pane -U 2
bind -T copy-mode-vi C-S-L resize-pane -R 2

# Status-bar
set -g status-interval 1
set -g status-position top
# set -g status-left " S: [#S] "
# set -g status-right " H: [#H] "
# set -g status-right " Session: [#S] | Timer: [#(cat ~/.thyme-tmux)] "
set -g status-left ""
set -g status-right " Session: [#S] "
set -g status-justify left
set -g window-status-format " #I:[#W] "
set -g window-status-current-format " #I:[#W] "
set -g window-status-separator ""
set -g automatic-rename-format '#{b:pane_current_path}'

# Colors
set -g status-style "fg=white bg=black"
set -g status-left-style "fg=black bg=white"
set -g status-right-style "fg=black bg=white"
set -g message-style "fg=black bg=white"
set -g mode-style "fg=brightblack bg=white reverse"
set -g pane-border-style "fg=black bg=black"
set -g pane-active-border-style "fg=white bg=white"
setw -g window-status-style "fg=white bg=black"
setw -g window-status-current-style "fg=black bg=white"
